package view

import (
	"fmt"
	"github.com/Jedsonofnel/otterkin-web/model"
	"github.com/Jedsonofnel/otterkin-web/view/components"
	"github.com/Jedsonofnel/otterkin-web/view/layout"
)

type AdminPageData struct {
	user    model.User
	artists []model.Artist
}

func NewAdminPageData(artists []model.Artist, user model.User) AdminPageData {
	return AdminPageData{artists: artists, user: user}
}

templ AdminArtistPageResponse(ld layout.LayoutData, apd AdminPageData) {
	@layout.Dashboard(ld, "admin-artists") {
		<h1>Artists:</h1>
		<table>
			<tr>
				<th>Name</th>
				<th>Insta handle</th>
				<th>Email</th>
				<th>Approved</th>
			</tr>
			for _, artist := range apd.artists {
				@ArtistRow(artist)
			}
		</table>
	}
}

templ ArtistRow(artist model.Artist) {
	<tr id={ fmt.Sprintf("artist-row-%s", artist.Id) }>
		<td>{ artist.User.FirstName } { artist.User.LastName }</td>
		<td>{ artist.InstagramHandle }</td>
		<td>{ artist.User.Email }</td>
		if artist.Approved {
			<td>
				<button
					hx-get={ string(templ.URL(fmt.Sprintf("/admin/revoke/%s", artist.Id))) }
					hx-target="body"
					hx-swap="beforeend"
				>
					Revoke
				</button>
			</td>
		} else {
			<td>
				<button
					hx-put={ string(templ.URL(fmt.Sprintf("/admin/approve/%s", artist.Id))) }
					hx-target={ fmt.Sprintf("#artist-row-%s", artist.Id) }
					hx-swap="outerHTML"
				>Approve</button>
			</td>
		}
	</tr>
}

templ ArtistRevokeModal(artist model.Artist) {
	@components.Modal() {
		<p>Are you sure you want to revoke { artist.User.FirstName } as an artist?</p>
		<div class="modal-buttons">
			<button data-modal-close-btn>Cancel</button>
			<button
				hx-put={ string(templ.URL(fmt.Sprintf("/admin/revoke/%s", artist.Id))) }
				hx-target={ fmt.Sprintf("#artist-row-%s", artist.Id) }
				hx-swap="outerHTML"
				data-modal-close-btn
			>Confirm</button>
		</div>
	}
}
