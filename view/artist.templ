package view

import (
	"fmt"
	"github.com/Jedsonofnel/otterkin-web/model"
	"github.com/Jedsonofnel/otterkin-web/view/components"
	"github.com/Jedsonofnel/otterkin-web/view/layout"
)

// public artist view page
type ArtistPageData struct {
	artist   model.Artist
	artworks []model.Artwork
}

func NewArtistPageData(artist model.Artist, artworks []model.Artwork) ArtistPageData {
	return ArtistPageData{
		artist:   artist,
		artworks: artworks,
	}
}

templ ArtistPage(ld layout.LayoutData, apd ArtistPageData) {
	@layout.Default(ld) {
		<h1>Artist page for { apd.artist.User.FirstName }</h1>
	}
}

// profile edit page
type ArtistProfilePageData struct {
	artist model.Artist
  tagOptions map[string]model.Tags
  artistTags map[string]model.Tags
}

func NewArtistProfilePageData(artist model.Artist, tagOptions map[string]model.Tags, artistTags map[string]model.Tags) ArtistProfilePageData {
	return ArtistProfilePageData{
		artist: artist,
    tagOptions: tagOptions,
    artistTags: artistTags,
	}
}

templ ArtistProfilePage(ld layout.LayoutData, apd ArtistProfilePageData) {
	@layout.Dashboard(ld, "artist-settings") {
		<section class="dashboard-section fw" hx-boost>
			<h1 class="dashboard-title" id="artist-greeting">Hello { apd.artist.User.FirstName }</h1>
			if !apd.artist.Approved {
				<p>
					You haven't yet been approved. Our team should be in touch (if they aren't already)
					very soon and we hope to get you on your way before long!
				</p>
			}
			<a href={ templ.URL(fmt.Sprintf("/artist/%s", apd.artist.Id)) }>See your profile</a>
		</section>
		<section class="dashboard-section">
			<h2 class="dashboard-subtitle">Artist details</h2>
			@artistUpdateForm(apd.artist)
		</section>
		<section>
			<h2 class="dashboard-subtitle">Artist tags</h2>
			@artistTagInputs(apd)
		</section>
		@artistServicesTable()
	}
}

templ artistTagInputs(apd ArtistProfilePageData) {
	@components.DropdownMultiSelect(components.DropdownMultiSelectProps{
		Name:    "mediums",
		Options: apd.tagOptions["medium"].ToMap(),
    Selected: apd.artistTags["medium"].ToMap(),
    AddURL: fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
	})

	@components.DropdownMultiSelect(components.DropdownMultiSelectProps{
		Name:    "styles",
		Options: apd.tagOptions["style"].ToMap(),
    Selected: apd.artistTags["style"].ToMap(),
    AddURL: fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
	})

	@components.DropdownMultiSelect(components.DropdownMultiSelectProps{
		Name:    "subjects",
		Options: apd.tagOptions["subject"].ToMap(),
    Selected: apd.artistTags["subject"].ToMap(),
    AddURL: fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
	})
}

templ artistUpdateForm(artist model.Artist) {
	<form hx-put={ fmt.Sprintf("/artist/profile/%s", artist.Id) } class="profile-form">
		<div class="form-field">
			<label for="instagram_handle">Instagram Handle</label>
			<input
				class="text-input"
				id="instagram_handle"
				name="instagram_handle"
				type="text"
				value={ artist.InstagramHandle }
			/>
		</div>
		<div class="form-field">
			<label for="biography">Short Biography</label>
			<textarea class="textarea-input" id="biography" name="biography" rows="3" maxlength="128">
				{ artist.Biography }
			</textarea>
		</div>
		<input class="button soft" type="submit" value="Update"/>
	</form>
}

templ ArtistUpdateResponse(artist model.Artist) {
	@artistUpdateForm(artist)
	<h1 class="dashboard-title" id="artist-greeting" hx-swap-oob="outerHTML">Hello { artist.User.FirstName }</h1>
	@layout.FlashInfo("Updated your details!")
}

templ artistServicesTable() {
	<section class="dashboard-section fw">
		<h2 class="dashboard-subtitle">
			Services table
		</h2>
	</section>
}

// gallery page
type ArtistGalleryPageData struct {
	artist   model.Artist
	artworks []model.Artwork
}

func NewArtistGalleryPageData(artist model.Artist, artworks []model.Artwork) ArtistGalleryPageData {
	return ArtistGalleryPageData{
		artist:   artist,
		artworks: artworks,
	}
}

templ ArtistProfileGalleryPage(ld layout.LayoutData, agd ArtistGalleryPageData) {
	@layout.Dashboard(ld, "artist-gallery") {
		<h1 class="dashboard-title">Your gallery</h1>
		<section class="dashboard-section">
			<form
				hx-post={ fmt.Sprintf("/artist/profile/%s/gallery", agd.artist.Id) }
				enctype="multipart/form-data"
				hx-target="#artist-gallery"
				hx-swap="beforeend"
				class="column-form"
				hx-reset-on-success
				data-image-preview-form
			>
				<h2 class="dashboard-subtitle">Add your artwork</h2>
				<div class="form-field">
					<label for="title">Title</label>
					<input class="text-input" id="title" name="title" type="text"/>
					<span id="title-error"></span>
				</div>
				<div class="form-field">
					<label for="description">Description (optional)</label>
					<textarea class="textarea-input" id="description" name="description" rows="3" maxlength="128"></textarea>
				</div>
				<input type="hidden" name="visible" value="true"/>
				<input type="hidden" name="artist_id" value={ agd.artist.Id }/>
				<div class="form-field">
					<label for="image" hidden="true">Image</label>
					<input id="image" class="file-input" name="image" type="file" accept="image/*" data-image-preview-input/>
					<span id="image-error"></span>
				</div>
				<img data-image-preview-img hidden class="image-preview"/>
				<input class="button soft" type="submit" value="Add image"/>
			</form>
		</section>
		<section class="dashboard-section">
			<h2 class="dashboard-subtitle">Your artwork</h2>
			@artistGallery() {
				for _, image := range agd.artworks {
					@EditableImage(image)
				}
			}
		</section>
	}
}

var galleryErrFields []string = []string{
	"title",
	"image",
}

templ GalleryFormError(errMap map[string]string) {
	for _,field := range galleryErrFields {
		if errMap[field] != "" {
			<p id={ fmt.Sprintf("%s-error", field) } hx-swap-oob="outerHTML" class="form-error">{ errMap[field] }</p>
		} else {
			<span id={ fmt.Sprintf("%s-error", field) } hx-swap-oob="outerHTML"></span>
		}
	}
}

templ GalleryFormSuccess(artwork model.Artwork) {
	<img id="gallery-preview" class="hidden" hx-swap-oob="outerHTML"/>
	@EditableImage(artwork)
	@GalleryFormError(make(map[string]string))
}
