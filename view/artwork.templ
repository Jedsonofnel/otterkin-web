package view

import (
	"fmt"
	"github.com/Jedsonofnel/otterkin-web/model"
	"github.com/Jedsonofnel/otterkin-web/view/components"
	"github.com/Jedsonofnel/otterkin-web/view/layout"
)

templ EditableArtwork(artwork model.Artwork) {
	<div class="editable-artwork-container">
		<button
			id={ fmt.Sprintf("editable-artwork-%s", artwork.Id) }
			class="editable-artwork-edit-btn"
			hx-get={ fmt.Sprintf("/artwork/%s/update-modal", artwork.Id) }
			hx-target="body"
			hx-swap="beforeend"
		>
			<span class="artwork-contextbtn-icon"></span>
		</button>
		<button
			class="editable-artwork-expand-btn"
			hx-get={ fmt.Sprintf("/artwork/%s?modal=true", artwork.Id) }
			hx-target="body"
			hx-swap="beforeend"
		>
			<i class="at-move-down-up-arrows-bold"></i>
		</button>
		@LoadImageSquare(fmt.Sprintf("/artwork/%s", artwork.Id))
	</div>
}

templ replaceEditableImage(artwork model.Artwork) {
	<template hx-swap-oob={ fmt.Sprintf("outerHTML:editable-artwork-%s", artwork.Id) }>
		@EditableArtwork(artwork)
	</template>
}

templ ArtworkUpdateSuccess(artwork model.Artwork) {
	@replaceEditableImage(artwork)
	@layout.FlashInfo("Image updated!")
}

templ artistPageGallery(artworks []model.Artwork) {
	<div class="artistpage-gallery" data-carousel="600">
		for i := range [5]int64{} {
			if len(artworks) > i {
				@LoadImageCovered(fmt.Sprintf("/artwork/%s", artworks[i].Id))
			} else {
				<div>Hello</div>
			}
		}
	</div>
}

templ artistGallery() {
	<div id="artist-gallery" class="image-gallery">
		{ children... }
	</div>
}

templ LoadImage(url string) {
	<div hx-get={ url } hx-trigger="revealed" class="artwork-container-fullsize" hx-swap="innerHTML" hx-target="this">
		<img alt="Image loading..." class="htmx-indicator image-placeholder"/>
	</div>
}

templ LoadImageCovered(url string) {
	<div hx-get={ url } hx-trigger="revealed" class="artwork-container-covered" hx-swap="innerHTML" hx-target="this">
		<img alt="Image loading..." class="htmx-indicator image-placeholder"/>
	</div>
}

templ LoadImageSquare(url string) {
	<div hx-get={ url } hx-trigger="revealed" class="artwork-container-square" hx-swap="innerHTML" hx-target="this">
		<img alt="Image loading..." class="htmx-indicator image-placeholder"/>
	</div>
}

templ ImageModal(url string) {
	@components.ModalBase() {
		<div class="image-modal-container" data-modal-close-btn>
			@LoadImage(url)
		</div>
	}
}

templ Image(url string, alt string) {
	<img alt={ alt } src={ url }/>
}
